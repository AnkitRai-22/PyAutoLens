import random
import string
from auto_lens import galaxy
from auto_lens.model_mapper import PriorException


class Redshift:
    def __init__(self, redshift):
        self.redshift = redshift


class GalaxyPrior:
    """
    Class to produce Galaxy instances from sets of profile classes using the model mapper
    """

    def __init__(self, light_profile_classes=None, mass_profile_classes=None):
        """
        Parameters
        ----------
        light_profile_classes: [LightProfile]
            The classes for which light profile instances are generated for this galaxy
        mass_profile_classes: [MassProfile]
            The classes for which light profile instances are generated for this galaxy
        """
        self.id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))

        self.light_profile_classes = light_profile_classes if light_profile_classes is not None else []
        self.mass_profile_classes = mass_profile_classes if mass_profile_classes is not None else []

    def attach_to_model_mapper(self, model_mapper):
        """
        Associate this instance with a given model_mapper, passing its internal classes to the model mapper to become
        priors.

        Parameters
        ----------
        model_mapper: ModelMapper
            A class used to generated instances from non-linear search hypercube vectors.

        Returns
        -------
        prior_models: [PriorModel]
            The prior models created to generate instances of the classes
        """
        prior_models = []

        for num, light_profile_class in enumerate(self.light_profile_classes):
            prior_models.append(model_mapper.add_class("{}_light_profile_{}".format(self.id, num), light_profile_class))

        for num, mass_profile_class in enumerate(self.mass_profile_classes):
            prior_models.append(model_mapper.add_class("{}_mass_profile_{}".format(self.id, num), mass_profile_class))

        prior_models.append(model_mapper.add_class(self.redshift_name.format(self.id), Redshift))

        return prior_models

    @property
    def light_profile_names(self):
        """
        Returns
        -------
        light_profile_names: [String]
            A list of names associated with the light profiles of this galaxy
        """
        return ["{}_light_profile_{}".format(self.id, num) for num in range(len(self.light_profile_classes))]

    @property
    def mass_profile_names(self):
        """
        Returns
        -------
        mass_profile_names: [String]
            A list of names associated with the mass profiles of this galaxy
        """
        return ["{}_mass_profile_{}".format(self.id, num) for num in range(len(self.mass_profile_classes))]

    @property
    def redshift_name(self):
        """
        Returns
        -------
        redshift_name: String
            The name of the prior associated with redshift for this galaxy.
        """
        return "{}_redshift".format(self.id)

    def galaxy_for_model_instance(self, model_instance):
        """
        Create a galaxy from a model instance that was generated by the associated model mapper.

        Parameters
        ----------
        model_instance: ModelInstance
            A model instance comprising the class instances generated by the model mapper.

        Returns
        -------
        galaxy: Galaxy
            A galaxy generated for this GalaxyPrior
        """
        light_profiles = []
        mass_profiles = []
        try:
            for name in self.light_profile_names:
                light_profiles.append(getattr(model_instance, name))
            for name in self.mass_profile_names:
                mass_profiles.append(getattr(model_instance, name))
            redshift = getattr(model_instance, self.redshift_name).redshift
        except AttributeError as e:
            raise PriorException(*e.args)

        return galaxy.Galaxy(light_profiles=light_profiles, mass_profiles=mass_profiles, redshift=redshift)
