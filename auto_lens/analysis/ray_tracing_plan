def ray_tracing(lensing_plane, analysis_image):

    deflection_angles = np.zeros
    sub_deflection_angles = np.zeros

    image_coordinates = analysis_image_coordinates
    sub_coordinates = analysis_image.sub_coordinates

    for galaxy in lensing_plane:

        if type(galaxy.light_model) == LightProfile:
            light_model = galaxy.intensity_at_coordinates(image_coordiates)
        elif type(galaxy.light_model) == SourcePixelization:
            source_pixelization = galaxy.setup_source_pixelization(sub_coordinates, image_coordinates)

        if galaxy.mass_model != None:

            deflection_angles += galaxy.deflection_angles_at_coordinates(image_coordinates)
            sub_deflection_angles += galaxy.deflection_angles_at_coordinates(sub_coordinates)

            # Need to understand how we apply the deflection angles to the next set of image coordinates. Some sort
            # of ratio of lens redshifts normalized by the source redshift.

            image_coordinates -= deflection_angles * redshift_factor
            sub_coordinates -= sub_deflection_angles * redshift_factor

    # All parametric light profiles are now computed and source planes are set up

    light_model_psf = light_model.convolve_psf().flatten()

    subtracted_image = image - light_model_psf

    # perform pixelization rotuines after subtracted_image, so computing D, inverting for S, chi^2.

